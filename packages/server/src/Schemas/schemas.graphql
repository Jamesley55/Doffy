type User {
  id: ID!
  username: String!
  email: String!
}
type Message {
  text: String!
  userId: String!
  bookingId: String!
}

type Query {
  messages(bookingId: String!): [Message!]!
}

type Query {
  me: User
}

type Error {
  path: String!
  message: String!
}
type LoginResponse {
  errors: [Error!]
  sessionID: String
}
type RegisterResponse {
  errors: [Error!]
  user: User
}
input CreateServices {
  name: String!
  category: String!
  description: String!
  coutryId: String
  stateId: String
  cityId: String
  Taxes: Boolean!
  Adress: String
  price: Float!
  payoutSchedule: String!
  customerBillingStatement: String!
  latitude: Float
  longitude: Float
}
type service {
  Id: ID
}

type S3Payload {
  signedRequest: String!
  url: String!
}
input MessageInput {
  content: String!
  serviceId: String!
}
type Mutation {
  register(
    username: String!
    email: String!
    password: String!
    confirmPassword: String!
  ): [Error]
  login(email: String!, password: String!): LoginResponse!
  confirmUser(token: String!): Boolean
  forgotPassword(email: String!): Boolean
  changePassword(token: String!, password: String!): User
  createService(input: CreateServices): Boolean!
  signS3(filename: String!, filetype: String!): S3Payload!
  createMessage(message: MessageInput): Boolean!
}
